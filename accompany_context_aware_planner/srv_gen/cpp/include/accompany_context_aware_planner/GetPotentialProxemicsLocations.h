/* Auto-generated by genmsg_cpp for file /home/joe/git/accompany/accompany_context_aware_planner/srv/GetPotentialProxemicsLocations.srv */
#ifndef ACCOMPANY_CONTEXT_AWARE_PLANNER_SERVICE_GETPOTENTIALPROXEMICSLOCATIONS_H
#define ACCOMPANY_CONTEXT_AWARE_PLANNER_SERVICE_GETPOTENTIALPROXEMICSLOCATIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"


#include "geometry_msgs/PoseStamped.h"

namespace accompany_context_aware_planner
{
template <class ContainerAllocator>
struct GetPotentialProxemicsLocationsRequest_ {
  typedef GetPotentialProxemicsLocationsRequest_<ContainerAllocator> Type;

  GetPotentialProxemicsLocationsRequest_()
  : header()
  , userId(0)
  , userPosture(0)
  , userPose()
  , robotGenericTaskId(0)
  {
  }

  GetPotentialProxemicsLocationsRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , userId(0)
  , userPosture(0)
  , userPose(_alloc)
  , robotGenericTaskId(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _userId_type;
  int32_t userId;

  typedef int32_t _userPosture_type;
  int32_t userPosture;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _userPose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  userPose;

  typedef int32_t _robotGenericTaskId_type;
  int32_t robotGenericTaskId;


  typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPotentialProxemicsLocationsRequest
typedef  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<std::allocator<void> > GetPotentialProxemicsLocationsRequest;

typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest> GetPotentialProxemicsLocationsRequestPtr;
typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest const> GetPotentialProxemicsLocationsRequestConstPtr;


template <class ContainerAllocator>
struct GetPotentialProxemicsLocationsResponse_ {
  typedef GetPotentialProxemicsLocationsResponse_<ContainerAllocator> Type;

  GetPotentialProxemicsLocationsResponse_()
  : targetPoses()
  {
  }

  GetPotentialProxemicsLocationsResponse_(const ContainerAllocator& _alloc)
  : targetPoses(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _targetPoses_type;
  std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  targetPoses;


  typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPotentialProxemicsLocationsResponse
typedef  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<std::allocator<void> > GetPotentialProxemicsLocationsResponse;

typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse> GetPotentialProxemicsLocationsResponsePtr;
typedef boost::shared_ptr< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse const> GetPotentialProxemicsLocationsResponseConstPtr;

struct GetPotentialProxemicsLocations
{

typedef GetPotentialProxemicsLocationsRequest Request;
typedef GetPotentialProxemicsLocationsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetPotentialProxemicsLocations
} // namespace accompany_context_aware_planner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7e4d9bb122524dcf51041b1d5eae4394";
  }

  static const char* value(const  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7e4d9bb122524dcfULL;
  static const uint64_t static_value2 = 0x51041b1d5eae4394ULL;
};

template<class ContainerAllocator>
struct DataType< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "accompany_context_aware_planner/GetPotentialProxemicsLocationsRequest";
  }

  static const char* value(const  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
Header header\n\
\n\
int32 userId\n\
\n\
int32 userPosture\n\
\n\
geometry_msgs/Pose userPose\n\
\n\
int32 robotGenericTaskId\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d36f7b3ff3d7bdbc4dd66f03bac28fc";
  }

  static const char* value(const  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4d36f7b3ff3d7bdbULL;
  static const uint64_t static_value2 = 0xc4dd66f03bac28fcULL;
};

template<class ContainerAllocator>
struct DataType< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "accompany_context_aware_planner/GetPotentialProxemicsLocationsResponse";
  }

  static const char* value(const  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/PoseStamped[] targetPoses\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.userId);
    stream.next(m.userPosture);
    stream.next(m.userPose);
    stream.next(m.robotGenericTaskId);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPotentialProxemicsLocationsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.targetPoses);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPotentialProxemicsLocationsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<accompany_context_aware_planner::GetPotentialProxemicsLocations> {
  static const char* value() 
  {
    return "6175f6ce97ef11ae316c7fd840c773e6";
  }

  static const char* value(const accompany_context_aware_planner::GetPotentialProxemicsLocations&) { return value(); } 
};

template<>
struct DataType<accompany_context_aware_planner::GetPotentialProxemicsLocations> {
  static const char* value() 
  {
    return "accompany_context_aware_planner/GetPotentialProxemicsLocations";
  }

  static const char* value(const accompany_context_aware_planner::GetPotentialProxemicsLocations&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6175f6ce97ef11ae316c7fd840c773e6";
  }

  static const char* value(const accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "accompany_context_aware_planner/GetPotentialProxemicsLocations";
  }

  static const char* value(const accompany_context_aware_planner::GetPotentialProxemicsLocationsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6175f6ce97ef11ae316c7fd840c773e6";
  }

  static const char* value(const accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "accompany_context_aware_planner/GetPotentialProxemicsLocations";
  }

  static const char* value(const accompany_context_aware_planner::GetPotentialProxemicsLocationsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ACCOMPANY_CONTEXT_AWARE_PLANNER_SERVICE_GETPOTENTIALPROXEMICSLOCATIONS_H

